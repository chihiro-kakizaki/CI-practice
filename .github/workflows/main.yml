on:
  push:

jobs:
  push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr 

      - name: build and push docker image to ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ci-practice
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build  --platform linux/amd64 . --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "::set-output name=image-nginx::${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: task-definition.json
          CONTAINER_NAME_NGINX: ci-practice-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # envで設定したパスのtask-definition
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ steps.build-image-nginx.outputs.image-nginx }}

      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: ci-practice-service                
          ECS_CLUSTER: ci-practice-cluster 
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # task-def-nextで作成したtask-definition
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true